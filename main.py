from enum import Enum
from io import BytesIO, StringIO
from typing import Union
import os
from dotenv import load_dotenv
load_dotenv()  # loads variables from .env file
from PIL import Image
import replicate
import concurrent.futures
import base64
import pandas as pd
import streamlit as st
import requests, json
from rembg import remove

STYLE = """
<style>
img {
    max-width: 100%;
    width: 300px;
}
</style>
"""

class FileUpload:
    
    def __init__(self):
        self.fileTypes = ["csv", "png", "jpg"]

    def display_image(self, image, caption):
        st.image(image, caption=caption, use_column_width=True)

    def load_and_display_file(self, file):
      if file.type == "text/csv":
          data = pd.read_csv(file)
          st.dataframe(data.head(10))
      else:
          image = Image.open(file)
          resized_image = image.resize((500, int(image.height * (500 / image.width))))
          return image, resized_image
      return None, None

    def process_image(self, image):
      output_image = remove(image)
      return output_image
    
    def generate_prompt(self, image):
        caption = replicate.run(
            "salesforce/blip:2e1dddc8621f72155f24cf2e0adbde548458d3cab9f00c0139eea840d0ac4746",
            input={
                "task": "image_captioning",
                "image": image
            }
        )
        return caption

    def display_side_by_side_images(self, image1, caption1, image2, caption2):
        col1, col2 = st.columns(2)
        with col1:
            self.display_image(image1, caption1)
        with col2:
            self.display_image(image2, caption2)

    # Model1:  
    # Image generated by this model is not that good.
    def generate_logerzhu_adinpaint_images(self, prompt, file):
        input = {
            "prompt": prompt,
            "image_num": 2,
            "image_path": file,
            "product_size": "0.5 * width",
            "negative_prompt": "frames (worst quality:2)"
        }
        output = replicate.run(
            "logerzhu/ad-inpaint:b1c17d148455c1fda435ababe9ab1e03bc0d917cc3cf4251916f22c45c83c7df",
            input=input
        )
        print(output)
        generated_images = output[1:]
        for image in generated_images:
            st.image(image, width=400)
        
    def generate_wolverinn_realistic_background(self, prompt, file):
        output = replicate.run(
          "wolverinn/realistic-background:ce02013b285241316db1554f28b583ef5aaaf4ac4f118dc08c460e634b2e3e6b",
            input={
                "seed": -1,
                "image": file,
                "steps": 20,
                "prompt": prompt,
                "cfg_scale": 7,
                "max_width": 1024,
                "max_height": 1024,
                "sampler_name": "DPM++ SDE Karras",
                "negative_prompt": "(deformed iris, deformed pupils, semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, anime, mutated hands and fingers:1.4), (deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, disconnected limbs, mutation, mutated, ugly, disgusting, amputation, mug, cup",
                "denoising_strength": 0.75,
                "only_masked_padding_pixels": 4
            }
        )
        print(output)
        if not output:
            st.write("Loading...")
        else:
            image = output['image']
            st.image(image, width=400)
    
    def addTextToImage(self, image, text_title, text_subtitle):
        api_key = os.environ['APITEMPLATE_API_KEY']
        template1_id = os.environ['APITEMPLATE_TEMPLATE1_ID']
        template2_id = os.environ['APITEMPLATE_TEMPLATE2_ID']
        
        buffered = BytesIO()
        image.save(buffered, format="PNG")
        img_bytes = buffered.getvalue()

        data = {
            "overrides":[
                {
                    "name":"text-title",
                    "text":text_title,
                    "textBackgroundColor":"rgba(246, 243, 243, 0)"
                },
                {
                    "name":"text-sub-title",
                    "text":text_subtitle,
                    "textBackgroundColor":"rgba(246, 243, 243, 0)"
                },
                {
                    "name":"background-image",
                    "src": f"data:image/png;base64,{base64.b64encode(img_bytes).decode()}"
                }
            ]
        }
        def create_image(template_id):
            response = requests.post(
                f"https://rest.apitemplate.io/v2/create-image?template_id={template_id}",
                headers={"X-API-KEY": api_key},
                json=data
            )
            return response
        
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future_to_template = {
                executor.submit(create_image, template1_id): 'Template 1',
                executor.submit(create_image, template2_id): 'Template 2'
            }
            for future in concurrent.futures.as_completed(future_to_template):
                template_name = future_to_template[future]
                try:
                    response = future.result()
                    if response.status_code == 200:
                        download_url = response.json().get('download_url')
                        st.image(download_url, width=400, caption=template_name)
                    else:
                        st.write(f"Error in generating image with {template_name}")
                except Exception as e:
                    st.write(f"Exception in processing {template_name}: {e}")

    def run(self):
        st.header("Image Optimization Tool")
        # input_prompt = st.text_input("Enter the prompt")
        text_title = st.text_input("Enter the title")
        text_subtitle = st.text_input("Enter the subtitle")
        st.markdown(STYLE, unsafe_allow_html=True)
        file = st.file_uploader("Upload file", type=self.fileTypes)
        show_file = st.empty()
        
        if not file:
            show_file.info("Please upload a file of type: " + ", ".join(self.fileTypes))
            return
        
        original_image, resized_image = self.load_and_display_file(file)
        if original_image:
            output_image = self.process_image(original_image)
            self.display_side_by_side_images(resized_image, "Original Image", output_image, "Background Removed")
            caption = self.generate_prompt(file)
            st.write(caption)
            if caption:
                if st.button("Generate Image") and output_image:
                    self.addTextToImage(output_image, text_title, text_subtitle)
                #   self.generate_logerzhu_adinpaint_images(input_prompt, file)
                #   self.generate_wolverinn_realistic_background(input_prompt, file)
        file.close()

if __name__ == "__main__":
    helper = FileUpload()
    helper.run()
